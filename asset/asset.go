// Code generated by go-bindata.
// sources:
// static/data.db
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticDataDb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd9\x5d\x4f\xdb\x56\x18\xc0\xf1\x63\x12\x92\xe0\xc4\x84\x5d\x79\x37\xd3\x4c\xb4\x49\x44\xa0\x89\x10\x01\x9a\x26\xa4\x65\xc8\x9a\xa2\x85\xc0\x82\xd9\x16\x69\x93\x95\x25\x26\xb5\x94\x17\x20\x46\xa2\x97\x09\x52\x3f\x43\x3f\x46\x3f\x46\x6f\x7a\xd1\xab\x5e\x55\xea\x6d\xbf\x00\xbd\xab\xaa\x18\x02\x24\xb1\x49\x43\x2b\xd1\x5a\xff\xdf\x05\xc2\xcf\x89\x8f\x9e\xf3\xf8\x39\x10\xeb\xec\xff\x59\xb0\x1d\x4b\x3b\x6c\x9f\x34\x2b\x8e\x96\x15\x0b\x42\x92\xc4\xaf\x9a\x26\x84\x90\x85\x10\x8a\xb8\x91\x14\x42\x84\x6f\x5d\x4b\x62\x32\x59\xfc\xf4\xed\x73\x25\xfe\x46\x24\x62\x1b\x62\xfe\xdd\xfc\x33\xe5\xa5\xf2\x44\x7e\xad\xfc\x12\xdb\x48\x3c\x9d\x7b\x15\x7b\x9f\x78\x9b\x08\x7f\xc4\x3c\x00\x00\xe0\xc1\x75\xf5\x68\x54\xdd\xda\x92\x7a\xdf\x39\x95\xff\x1b\x96\xe9\x98\x9d\xc7\xad\xaa\xd9\x68\xd7\xcd\x76\xa3\x66\xae\xad\x66\x7e\x5e\x5d\xcf\xac\xfb\xc5\x63\xdb\x25\x3d\x67\xe8\x9a\x91\xfb\xad\xa0\x6b\x29\xbf\x8f\xa5\xb4\x25\x45\xd6\xb4\x94\x5d\x4b\x69\x8e\x75\xe6\x68\xc5\x5d\x43\x2b\x1e\x14\x0a\x2b\x6e\xb8\x7e\xd2\x3e\x3d\x32\xfb\x83\xf9\xa2\xa1\xff\xae\x97\x2e\xc3\x8d\x4a\xc7\x31\x0f\xed\x86\x65\x0e\xee\x73\xe3\x7b\xa5\xfc\x4e\xae\x54\xd6\xfe\xd0\xcb\xda\x52\x7f\xca\xb4\x22\xa7\xbb\x7f\xc9\x51\x55\x55\xa5\xf3\xb8\xbb\x0e\xa7\x9f\x82\xfb\x23\x3e\x9c\xa1\x1b\xbb\x9d\x8e\xdd\x72\xac\xba\x75\x72\x9d\xd1\xd0\xf4\xb9\x03\x63\x37\x5f\xdc\x2e\xe9\x3b\x7a\xd1\xb8\x4c\xaa\x52\xab\x99\x8e\xdd\xb4\xc6\xef\xbc\x1a\xaf\x3a\x76\xbb\xe5\x37\x7a\x54\x71\x1e\xa5\x34\x43\xff\xc7\x18\x19\x18\x5a\xe6\xf5\x98\x22\xa7\x7b\xa1\xb9\xa8\xba\xb9\x29\x9d\xff\x38\x78\x40\x63\xcf\x26\xeb\x19\x94\xc7\x1e\xcd\xf8\x67\xee\x2a\xc4\x03\x2c\xd7\xff\xf1\xf6\xc4\xec\x65\x15\xbe\xf7\xad\xc2\x9a\x67\x30\x32\xb9\x0a\x6b\x13\xba\xf3\x0b\x29\x41\xf2\x85\xf8\x61\xe2\x6e\xfe\x26\x11\x55\x17\x17\xa5\x6e\xf3\x6a\x17\x0c\x76\xe3\xcd\x6f\xca\xe8\x7e\x18\x0c\x0c\xaa\x30\xb6\x19\x47\xf2\x76\x77\xe5\xad\x86\xf1\xc8\xf8\x7a\x8a\x7e\xde\xbb\xb1\x88\x5a\xdd\x92\x84\xdd\xaa\x59\x67\x9d\xe3\x86\xed\x58\x66\xe5\xd4\x69\xbb\xd7\xa6\xef\x1f\x9c\x8c\xdf\xc8\xdc\x5e\x3c\xa2\x2e\x2f\x4b\x65\x77\x89\x57\x13\x76\xac\xe3\x53\xab\x55\x1d\xbd\x4c\x0c\x2d\x76\x64\x70\xa9\x55\x69\x5a\x2b\x1d\xeb\x38\x9d\x8f\x44\xd4\xff\x36\xef\x48\xd1\xa3\xd9\x32\x9e\xe1\x68\x3e\x3c\xed\x54\x19\xef\xa9\x32\xb3\xdd\x7f\x43\x6e\xcf\xf7\xfe\xf6\xed\x79\xef\x3b\xc3\x93\x7b\x3e\x33\x6d\xcf\x7b\xb6\xfa\x68\x87\x7b\x34\xb6\x7f\x3f\xeb\x33\x11\xb5\x9c\x9d\xae\x52\xe3\xc1\x50\x77\x5f\x8a\xaa\xd9\xac\xd4\xdb\xf1\xad\xd2\x78\x68\x66\x62\x85\x3e\xad\x3e\x37\xc5\xb8\x67\x71\x84\x10\xd9\x29\xff\x93\xbb\x2f\xf8\x0b\xf7\xfe\x22\x00\x00\x00\x00\x00\x00\xbe\x02\xb2\xe0\xfd\x1f\x00\x00\x00\x00\x80\xa0\xe3\xfc\x1f\x00\x00\x00\x00\x80\xe0\xe3\xfc\x1f\x00\x00\x00\x00\x80\xe0\xe3\xfc\x1f\x00\x00\x00\x00\x80\xe0\xe3\xfc\x1f\x00\x00\x00\x00\x80\xe0\xe3\xfc\x1f\x00\x00\x00\x00\x80\xe0\xe3\xfc\x1f\x00\x00\x00\x00\x80\xe0\xe3\xfc\x1f\x00\x00\x00\x00\x80\xe0\xe3\xfd\x1f\x00\x00\x00\x00\x80\xe0\xeb\xbf\xff\x4b\xc9\x0b\x91\xbc\x78\xe8\x4c\x00\x00\x00\x00\x00\xc0\xe7\x15\x93\x42\xaa\x70\xcc\x46\xbb\xce\xf9\x3f\x00\x00\x00\x00\x00\xc1\xf7\x21\x00\x00\xff\xff\x54\x89\xf6\x31\x00\xd0\x00\x00")

func staticDataDbBytes() ([]byte, error) {
	return bindataRead(
		_staticDataDb,
		"static/data.db",
	)
}

func staticDataDb() (*asset, error) {
	bytes, err := staticDataDbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/data.db", size: 53248, mode: os.FileMode(438), modTime: time.Unix(1557887669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/data.db": staticDataDb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"data.db": &bintree{staticDataDb, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

